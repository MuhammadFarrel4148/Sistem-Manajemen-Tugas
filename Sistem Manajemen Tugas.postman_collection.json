{
	"info": {
		"_postman_id": "3dbfea1c-5b7c-4b49-a802-58cf8ff871a9",
		"name": "Sistem Manajemen Tugas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35050113"
	},
	"item": [
		{
			"name": "Register Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response body should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have username and email', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('username');\r",
							"    pm.expect(data).to.ownProperty('email');\r",
							"\r",
							"    pm.expect(data.username).to.not.equals('');\r",
							"    pm.expect(data.email).to.not.equals('');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username_1}}\",\r\n    \"email\": \"{{email_1}}\",\r\n    \"password\": \"{{password_1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign In Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response headers should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('respones body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson).to.ownProperty('token');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Berhasil login ke user');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"    pm.expect(responseJson.token).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('token', responseJson.token);\r",
							"});\r",
							"\r",
							"pm.test('response body data should have username and email', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { user } } = responseJson;\r",
							"\r",
							"    pm.expect(user).to.ownProperty('username');\r",
							"    pm.expect(user).to.ownProperty('email');\r",
							"\r",
							"    pm.expect(user.username).to.not.equals('');\r",
							"    pm.expect(user.email).to.not.equals('');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email_1}}\",\r\n    \"password\": \"{{password_1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Forgot Password Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response headers should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('respones body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Periksa email anda untuk reset kata sandi');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email_1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/forgotpassword",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"forgotpassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "Input OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response headers should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('respones body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Password berhasil direset');\r",
							"\r",
							"    const newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
							"    pm.environment.set('password_1', newPassword);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"codeOTP\": \"Your Code OTP\",\r\n    \"newPassword\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/inputotp",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"inputotp"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response headers should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('respones body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Berhasil logout');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/logout",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Task With Input User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Task berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test('response body data should have taskId', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('taskId');\r",
							"    pm.expect(data.taskId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('taskId', data.taskId);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title_1}}\",\r\n    \"description\": \"{{description_1}}\",\r\n    \"status\": \"{{status_1}}\",\r\n    \"deadline\": \"{{deadline_1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Task Without Input User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Task berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have taskId', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('taskId');\r",
							"    pm.expect(data.taskId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('taskIdWithoutInput', data.taskId);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tasks User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test('response body data should have a array and contain 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('tasks');\r",
							"    pm.expect(data.tasks).to.be.an('array');\r",
							"    pm.expect(data.tasks).to.lengthOf(2);\r",
							"})\r",
							"\r",
							"pm.test('response body data should have contains title, description, status, deadline', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { tasks } } = responseJson;\r",
							"\r",
							"    tasks.forEach((task) => {\r",
							"        pm.expect(Object.keys(task)).to.lengthOf(4);\r",
							"        pm.expect(task).to.ownProperty('title');\r",
							"        pm.expect(task).to.ownProperty('description');\r",
							"        pm.expect(task).to.ownProperty('status');\r",
							"        pm.expect(task).to.ownProperty('deadline');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tasks With Query Title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a array and contain 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('tasks');\r",
							"    pm.expect(data.tasks).to.be.an('array');\r",
							"    pm.expect(data.tasks).to.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain title, description, status, and deadline',() => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { tasks }} = responseJson;\r",
							"\r",
							"    tasks.forEach((task) => {\r",
							"        pm.expect(Object.keys(task)).to.lengthOf(4);\r",
							"        pm.expect(task).to.ownProperty('title');\r",
							"        pm.expect(task).to.ownProperty('description');\r",
							"        pm.expect(task).to.ownProperty('status');\r",
							"        pm.expect(task).to.ownProperty('deadline');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/tasks?title={{query_1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "title",
							"value": "{{query_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tasks With Query Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a array and contain 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('tasks');\r",
							"    pm.expect(data.tasks).to.be.an('array');\r",
							"    pm.expect(data.tasks).to.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain title, description, status, and deadline',() => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { tasks }} = responseJson;\r",
							"\r",
							"    tasks.forEach((task) => {\r",
							"        pm.expect(Object.keys(task)).to.lengthOf(4);\r",
							"        pm.expect(task).to.ownProperty('title');\r",
							"        pm.expect(task).to.ownProperty('description');\r",
							"        pm.expect(task).to.ownProperty('status');\r",
							"        pm.expect(task).to.ownProperty('deadline');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/tasks?status={{query_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "status",
							"value": "{{query_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/tasks/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have title, description, status, deadline', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { taskUpdate }} = responseJson;\r",
							"\r",
							"    pm.expect(Object.keys(taskUpdate)).to.lengthOf(4);\r",
							"    pm.expect(taskUpdate).to.ownProperty('title');\r",
							"    pm.expect(taskUpdate).to.ownProperty('description');\r",
							"    pm.expect(taskUpdate).to.ownProperty('status');\r",
							"    pm.expect(taskUpdate).to.ownProperty('deadline');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{titleUpdate_1}}\",\r\n    \"description\": \"{{descriptionUpdate_1}}\",\r\n    \"status\": \"{{statusUpdate_1}}\",\r\n    \"deadline\": \"{{deadlineUpdate_1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/tasks/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task Without Input",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have title, description, status, deadline', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { taskUpdate }} = responseJson;\r",
							"\r",
							"    pm.expect(Object.keys(taskUpdate)).to.lengthOf(4);\r",
							"    pm.expect(taskUpdate).to.ownProperty('title');\r",
							"    pm.expect(taskUpdate).to.ownProperty('description');\r",
							"    pm.expect(taskUpdate).to.ownProperty('status');\r",
							"    pm.expect(taskUpdate).to.ownProperty('deadline');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/tasks/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/tasks/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		}
	]
}